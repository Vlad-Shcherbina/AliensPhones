codes_dir = 'codes/'

reusable = [
    "DebugProcess",
    "Cross",
    "Safe",
    "Resp",
]
unique = [
    "SampleProcess",
    "Surfactant",
    "Antialvin",
    "Travian",
]

result = []
other_codes = []
for name in reusable+unique:
    print name
    result.append('\t\t"{}", new Boolean({}), '.format(name, str(name in reusable).lower()))
    codes = open('codes/{}'.format(name)).readlines()
    for code in codes:
        code = code.strip()
        assert not code.startswith('0'), code
        for c in other_codes:
            assert not code.startswith(c), (code, c)
            assert not c.startswith(code), (code, c)
        other_codes.append(code)
        result.append('new Integer({}), '.format(code))
    result.append('\n')


cases = []
for name in reusable+unique:
    cases.append(
       '\t\tif (name.equals("{0}"))\n'
	   '\t\t\treturn new {0}();\n'.format(name))


template = """
///////////////////////////////
// Generated by aliens_tables.py
// Don't hand-edit!
///////////////////////////////

package com.medphone.aliens;

import com.medphone.Process;

class AliensTables {
	static final Object[] codes = {
%s	};
	
	static Process create_process(String name) {
%s		return null;
	}
}
"""

with open('com/medphone/aliens/AliensTables.java', 'w') as fout:
    print>>fout, template%(''.join(result), ''.join(cases))